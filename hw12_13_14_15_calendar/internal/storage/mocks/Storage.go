// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	storage "github.com/kristina71/avito_otus/hw12_13_14_15_calendar/internal/storage"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Storage) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, event
func (_m *Storage) Create(ctx context.Context, event *storage.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Storage) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *Storage) DeleteAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, event
func (_m *Storage) Get(ctx context.Context, event *storage.Event) (uuid.UUID, error) {
	ret := _m.Called(ctx, event)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) uuid.UUID); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *storage.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsPerDay provides a mock function with given fields: ctx, date
func (_m *Storage) GetEventsPerDay(ctx context.Context, date time.Time) ([]storage.Event, error) {
	ret := _m.Called(ctx, date)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsPerMonth provides a mock function with given fields: ctx, date
func (_m *Storage) GetEventsPerMonth(ctx context.Context, date time.Time) ([]storage.Event, error) {
	ret := _m.Called(ctx, date)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsPerWeek provides a mock function with given fields: ctx, date
func (_m *Storage) GetEventsPerWeek(ctx context.Context, date time.Time) ([]storage.Event, error) {
	ret := _m.Called(ctx, date)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *Storage) ListAll(ctx context.Context) ([]storage.Event, error) {
	ret := _m.Called(ctx)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context) []storage.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, event
func (_m *Storage) Update(ctx context.Context, event *storage.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
